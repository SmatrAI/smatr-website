# Deploy workflow
# This workflow is manually triggered to deploy react app

name: Deploy

on:
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Security scan should run first
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git-secrets
      
      - name: Install git-secrets (local scope)
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets
          make install PREFIX=$HOME/.local
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Run git-secrets scan
        run: |
          git secrets --register-aws
          git secrets --install
          git secrets --scan

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Required for checkout
    
    outputs:
      artifact-name: ${{ steps.build-info.outputs.artifact-name }}
      s3-bucket: ${{ vars.CLIENT_S3_BUCKET }}
      cloudfront-id: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # - name: Run tests
      #   run: npm test -- --coverage --watchAll=false
      
      - name: Build application
        run: npm run build
      
      - name: Set build info
        id: build-info
        run: |
          ARTIFACT_NAME="react-app-${{ github.sha }}"
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "Build artifact: $ARTIFACT_NAME"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo "🚀 Deploying to S3 bucket: ${{ vars.CLIENT_S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ vars.CLIENT_S3_BUCKET }} --delete
          echo "✅ S3 deployment completed"

      - name: Invalidate CloudFront distribution
        run: |
          echo "🔄 Invalidating CloudFront distribution: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}"
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          echo "✅ CloudFront invalidation created: $INVALIDATION_ID"

  # Summary job
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-deploy, security-scan]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Artifact** | ${{ needs.build-and-deploy.outputs.artifact-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Status** | ${{ needs.build-and-deploy.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Scan** | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **S3 Bucket** | ${{ needs.build-and-deploy.outputs.s3-bucket }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **CloudFront** | ${{ needs.build-and-deploy.outputs.cloudfront-id }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-and-deploy.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed. Check the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi